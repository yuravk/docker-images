name: AlmaLinux 8 and 9, Container/Docker Images builder and uploader

on:
    workflow_dispatch:
        inputs:
          major_version:
            description: 'AlmaLinux major version'
            required: true
            default: '9'
            type: choice
            options:
              - 9
              - 8

          platform:
            description: 'Comma-separated list of platforms: linux/amd64, linux/ppc64le, linux/s390x, linux/arm64'
            required: true
            default: 'linux/amd64, linux/ppc64le, linux/s390x, linux/arm64'

          image_types:
            description: 'Comma-separated list of image types (put each type in quotes): "default", "minimal", "micro", "base", "init"'
            required: true
            default: '"default", "minimal", "micro", "base", "init"'
 
          # registry:
          #   description: 'Registry to push'
          #   required: true
          #   default: 'ykohut/almalinux'
          #   type: choice
          #   options:
          #     - ykohut/almalinux
          #     - quay.io/ykohut/al

          push:
            description: 'Push to registries'
            required: true
            type: boolean

env:
  VERSION_MINOR: ${{ inputs.major_version == '9' && '3' || '9' }}
  # REGISTRY_IMAGE: ykohut/almalinux

jobs:
  build:
    name: "Build ${{ inputs.major_version }} ${{ matrix.image_types }} for ${{ inputs.platform }} and push to all registries"
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        # platform: ${{ fromJSON(format('[{0}]', inputs.platform || '"linux/amd64", "linux/ppc64le", "linux/s390x", "linux/arm64"')) }}
        #   - linux/amd64
        #   - linux/ppc64le
        #   - linux/s390x
        #   - linux/arm64

        image_types: ${{ fromJSON(format('[{0}]', inputs.image_types || '"default", "minimal", "micro", "base", "init"')) }}
          # - default
          # - minimal
          # - micro
          # - base
          # - init

    steps:
      -
        name: Prepare
        run: |
          # platform=${{ matrix.platform }}
          # echo "PLATFORM_PAIR=${platform//\//-}" >> $GITHUB_ENV
          image_types=${{ matrix.image_types }}
          echo "IMAGE_TYPES_PAIR=${image_types//\//-}" >> $GITHUB_ENV

          REGISTRIES="docker.io/ykohut/almalinux quay.io/ykohut/al"
          TAGS=
          for REGISTRY in ${REGISTRIES}; do
            case ${{ matrix.image_types }} in
              default )
                TAGS="${TAGS} $REGISTRY:${{ inputs.major_version }} $REGISTRY:${{ inputs.major_version }}.${{ env.VERSION_MINOR }}"
                [ "${{ inputs.major_version }}" = "9" ] && TAGS="${TAGS} $REGISTRY:latest"
                ;;
              * )
                TAGS="${TAGS} $REGISTRY:${{ inputs.major_version }}-${{ matrix.image_types }} $REGISTRY:${{ inputs.major_version }}.${{ env.VERSION_MINOR }}-${{ matrix.image_types }}"
                ;;
            esac
          done
          TAGS=${TAGS# }
          echo "TAGS=${TAGS// /,}" >> $GITHUB_ENV          
      -
        name: Checkout
        uses: actions/checkout@v4

      # -
      #   name: Docker meta
      #   id: meta
      #   uses: docker/metadata-action@v5
      #   with:
      #     images: ${{ env.REGISTRY_IMAGE }}
 
      -
        name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      -
        name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      -
        name: Login to Quay.io
        uses: docker/login-action@v3
        with:
          registry: quay.io
          username: ${{ secrets.QUAY_IO_USERNAME }}
          password: ${{ secrets.QUAY_IO_CLI_PASSWORD }}

      -
        name: Build and push by tags
        id: build
        uses: docker/build-push-action@v5
        with:
          context: "{{defaultContext}}:dockerfiles/al${{ inputs.major_version }}/${{ matrix.image_types }}"
          platforms: ${{ inputs.platform }}
          push: ${{ inputs.push }}
          tags: ${{ env.TAGS }}