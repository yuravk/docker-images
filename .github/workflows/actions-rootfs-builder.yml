name: AlmaLinux 8 and 9, Container/Docker Images builder and uploader

on:
    workflow_dispatch:
        inputs:
          major_version:
            description: 'AlmaLinux major version'
            required: true
            default: '9'
            type: choice
            options:
              - 9
              - 8

          platform:
            description: 'Comma-separated list of platforms: linux/amd64, linux/ppc64le, linux/s390x, linux/arm64'
            required: true
            default: 'linux/amd64, linux/arm64'

          image_types:
            description: 'Comma-separated list of image types (put each type in quotes): "default", "minimal", "micro", "base", "init"'
            required: true
            default: '"micro"'
 
          # registry:
          #   description: 'Registry to push'
          #   required: true
          #   default: 'docker.io/ykohut/almalinux'
          #   type: choice
          #   options:
          #     - docker.io/ykohut/almalinux
          #     - quay.io/ykohut/almalinux
          #     - ghcr.io/yuravk/almalinux
          registry:
            description: 'Comma-separated list of registries: docker.io/ykohut/almalinux, quay.io/ykohut/almalinux, ghcr.io/yuravk/almalinux'
            required: true
            default: 'docker.io/ykohut/almalinux, quay.io/ykohut/almalinux, ghcr.io/yuravk/almalinux'

          push:
            description: 'Push to registries'
            required: true
            type: boolean

env:
  # VERSION_MINOR: ${{ inputs.major_version == '9' && '3' || '10' }}
  REGISTRY_IMAGE: ykohut/almalinux

jobs:
  build:
    name: "Build ${{ inputs.major_version }} ${{ matrix.image_types }} for ${{ inputs.platform }} and push to all registries"
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        # platform: ${{ fromJSON(format('[{0}]', inputs.platform || '"linux/amd64", "linux/ppc64le", "linux/s390x", "linux/arm64"')) }}
        #   - linux/amd64
        #   - linux/ppc64le
        #   - linux/s390x
        #   - linux/arm64

        image_types: ${{ fromJSON(format('[{0}]', inputs.image_types || '"default", "minimal", "micro", "base", "init"')) }}
          # - default
          # - minimal
          # - micro
          # - base
          # - init

    steps:
      -
        name: Prepare
        run: |
          # set minor version
          case ${{ inputs.major_version }} in
            8)
              VERSION_MINOR="9" ;;
            9)
              VERSION_MINOR="3"  ;;
            10)
              VERSION_MINOR="0" ;;
          esac
          echo "VERSION_MINOR=${VERSION_MINOR}" >> $GITHUB_ENV

          platform="$( echo '${{ inputs.platform }}' | sed 's/\//_/g' )"
          echo "PLATFORM_PAIR=${platform//,/}" >> $GITHUB_ENV

          # date stamp
          STAMP=$(date '+%Y%m%d')
          echo "STAMP=${STAMP}" >> $GITHUB_ENV

          # list of registries to push to
          REGISTRIES="${{ inputs.registry }}"
          TAGS=
          for REGISTRY in ${REGISTRIES//,/ }; do
            case ${{ matrix.image_types }} in
              default )
                # tags: MAJOR, MAJOR.MINOR
                TAGS="${TAGS} $REGISTRY:${{ inputs.major_version }} $REGISTRY:${{ inputs.major_version }}.${VERSION_MINOR}"
                # tags: MAJOR.MINOR-STAMP
                TAGS="${TAGS} $REGISTRY:${{ inputs.major_version }}.${VERSION_MINOR}-${STAMP}"
                # tags: latest
                [ "${{ inputs.major_version }}" = "9" ] && TAGS="${TAGS} $REGISTRY:latest"
                ;;
              * )
                # tags: MAJOR-TYPE, MAJOR.MINOR-TYPE
                TAGS="${TAGS} $REGISTRY:${{ inputs.major_version }}-${{ matrix.image_types }} $REGISTRY:${{ inputs.major_version }}.${VERSION_MINOR}-${{ matrix.image_types }}"
                # tags: MAJOR.MINOR-TYPE-STAMP
                TAGS="${TAGS} $REGISTRY:${{ inputs.major_version }}.${VERSION_MINOR}-${{ matrix.image_types }}-${STAMP}"
                ;;
            esac
          done
          # remove space at the beginning of string
          TAGS=${TAGS# }
          # separate with comma instead of space and export to the action
          echo "TAGS=${TAGS// /,}" >> $GITHUB_ENV
          
          echo
          echo $TAGS
      -
        name: Checkout
        uses: actions/checkout@v4

      # -
      #   name: Docker meta
      #   id: meta
      #   uses: docker/metadata-action@v5
      #   with:
      #     images: ${{ env.REGISTRY_IMAGE }}
 
      -
        name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      -
        name: Login to Docker.io
        if: contains(inputs.registry, 'docker.io') && inputs.push
        uses: docker/login-action@v3
        with:
          registry: docker.io
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      -
        name: Login to Quay.io
        if: contains(inputs.registry, 'quay.io') && inputs.push
        uses: docker/login-action@v3
        with:
          registry: quay.io
          username: ${{ secrets.QUAY_IO_USERNAME }}
          password: ${{ secrets.QUAY_IO_CLI_PASSWORD }}
      -
        name: Login to Ghcr.io
        if: contains(inputs.registry, 'ghcr.io') && inputs.push
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ secrets.GIT_HUB_USERNAME }}
          password: ${{ secrets.GIT_HUB_TOKEN }}

      # - 
      #   name: Docker meta
      #   id: meta
      #   uses: docker/metadata-action@v5
      #   with:
      #     # list of Docker images to use as base name for tags
      #     images: ${{ inputs.registry }}
      #     # generate Docker tags based on the following events/attributes
      #     tags: |
      #       type=raw,priority=500,value=latest,enable=${{ matrix.image_types == 'default' && inputs.major_version == '9'  }}
      #       type=raw,priority=400,value=${{ inputs.major_version }},enable=${{ matrix.image_types == 'default' }}
      #       type=raw,priority=300,value=${{ inputs.major_version }}.${{ env.VERSION_MINOR }},enable=${{ matrix.image_types == 'default' }}
      #       type=raw,priority=300,value=${{ inputs.major_version }}.${{ env.VERSION_MINOR }}-${{ env.STAMP }},enable=${{ matrix.image_types == 'default' }}
      #       type=raw,priority=200,value=${{ inputs.major_version }}-${{ matrix.image_types }},enable=${{ matrix.image_types != 'default' }}
      #       type=raw,priority=100,value=${{ inputs.major_version }}.${{ env.VERSION_MINOR }}-${{ matrix.image_types }},enable=${{ matrix.image_types != 'default' }}
      #       type=raw,priority=100,value=${{ inputs.major_version }}.${{ env.VERSION_MINOR }}-${{ matrix.image_types }}-${{ env.STAMP }},enable=${{ matrix.image_types != 'default' }}

      -
        name: Build and push to registry
        # if 'Push to registries' is checked
        if: inputs.push
        id: build-push-registry
        uses: docker/build-push-action@v5
        with:
          provenance: false
          context: "{{defaultContext}}:dockerfiles/al${{ inputs.major_version }}"
          file: ./Dockerfile.${{ matrix.image_types }}
          platforms: ${{ inputs.platform }}
          push: ${{ inputs.push }}
          tags: ${{ env.TAGS }}
          # tags: ${{ steps.meta.outputs.tags }}
          # labels: ${{ steps.meta.outputs.labels }}

      -
        name: Build and store on client
        # try to store local if not 'Push to registries'
        if: ${{ ! inputs.push }}
        id: build-store-client
        uses: docker/build-push-action@v5
        with:
          provenance: false
          context: "{{defaultContext}}:dockerfiles/al${{ inputs.major_version }}"
          file: ./Dockerfile.${{ matrix.image_types }}
          platforms: ${{ inputs.platform }}
          push: ${{ inputs.push }}
          tags: ${{ env.TAGS }}
          # tags: ${{ steps.meta.outputs.tags }}
          # labels: ${{ steps.meta.outputs.labels }}

          # type=oci,dest=./al${{ inputs.major_version }}-${{ matrix.image_types }}.tar
          # type=image,push=true
          # type=local,dest=./al${{ inputs.major_version }}-${{ matrix.image_types }}
          outputs: |
            type=tar,dest=./al${{ inputs.major_version }}-${{ matrix.image_types }}.tar

      -
        name: Proceed local output
        # Try to extract and create rootfs from images
        if: ${{ failure() }} || ${{ ! inputs.push }}
        run: |
          echo "Try to extract and create rootfs from images"
          sudo rm -rf ${{ env.PLATFORM_PAIR }} || true
          for PLATFORM in ${{ env.PLATFORM_PAIR }}; do
            arch=${PLATFORM#linux_} || true
            echo "Creating almalinux-${{ inputs.major_version }}-docker-${arch}-${{ matrix.image_types }}.tar.xz" || true
            sudo tar xf ./al${{ inputs.major_version }}-${{ matrix.image_types }}.tar $PLATFORM || true
            sudo tar Jcf almalinux-${{ inputs.major_version }}-docker-${arch}-${{ matrix.image_types }}.tar.xz ./${PLATFORM} || true
          done
          sudo rm -rf ${{ env.PLATFORM_PAIR }} || true

          ls -la ./